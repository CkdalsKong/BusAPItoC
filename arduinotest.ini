typedef struct
{
    int mobileNo;        // 정류소 번호
    char routeName[30];  // 노선 번호
    
    char stationName[100];  // 정류소명
    int stationId;          // 정류소 아이디
    int routeId;            // 노선 아이디
    int staOrder;           // 정류소 순번
    
    int locationNo1;
    int predictTime1;
    int locationNo2;
    int predictTime2;
} BUS;

void parseUserData()
{
    Serial.println("-------------------------------------");
    Serial.println("[PARSE] User Data");
    
    // City1, 2 파싱
    for(int i = 0, num = 0, index = 0; i < sizeof(myData.city); i++)
        {
            if(num == 0)
                {
                    if(myData.city[i] == ',')
                        {
                            num++;
                            index = 0;
                            continue;
                        }
                    myWeather.city[num][index++] = myData.city[i];
                }
            else if(num == 1)
                {
                    if(myData.city[i] == '\0')
                        {
                            break;
                        }
                    myWeather.city[num][index++] = myData.city[i];
                }
        }
    printf("[CITY1] %s\r\n", myWeather.city[0]);
    printf("[CITY2] %s\r\n", myWeather.city[1]);
    
    // 정류장, 버스 파싱
    for(int i = 0, num = 0, index = 0; i < sizeof(myData.bus); i++)
        {
            if(num == 0)
                {
                    if(myData.bus[i] == ',')
                        {
                            num++;
                            index = 0;
                            continue;
                        }
                    myBus.routeName[index++] = myData.bus[i];
                }
            else if(num == 1)
                {
                    if(myData.bus[i] == '\0')
                        {
                            break;
                        }
                    myBus.stationName[index++] = myData.bus[i];
                }
        }

    printf("[BUS] %s\r\n", myBus.routeName);
    printf("[STATION] %d\r\n", myBus.stationName);
    
    // 국내 주식 파싱
    for(int i = 0, num = 0, index = 0; i < sizeof(myData.KR); i++)
        {
            if(num == 0)
                {
                    if(myData.KR[i] == ',')
                        {
                            num++;
                            index = 0;
                            continue;
                        }
                    myStockKR.code[num][index++] = myData.KR[i];
                }
            else if(num == 1)
                {
                    if(myData.KR[i] == ',')
                        {
                            num++;
                            index = 0;
                            continue;
                        }
                    myStockKR.code[num][index++] = myData.KR[i];
                }
            else if(num == 2)
                {
                    if(myData.KR[i] == '\0')
                        {
                            break;
                        }
                    myStockKR.code[num][index++] = myData.KR[i];
                }
        }
    printf("[KR1] %s\r\n", myStockKR.code[0]);
    printf("[KR2] %s\r\n", myStockKR.code[1]);
    printf("[KR3] %s\r\n", myStockKR.code[2]);
    
    // 해외 주식 파싱
    for(int i = 0, num = 0, index = 0; i < sizeof(myData.US); i++)
        {
            if(num == 0)
                {
                    if(myData.US[i] == ',')
                        {
                            myStockUS.name[num][index++] = '\0';
                            num++;
                            index = 0;
                            continue;
                        }
                    myStockUS.name[num][index++] = myData.US[i];
                }
            else if(num == 1)
                {
                    if(myData.US[i] == ',')
                        {
                            myStockUS.name[num][index++] = '\0';
                            num++;
                            index = 0;
                            continue;
                        }
                    myStockUS.name[num][index++] = myData.US[i];
                }
            else if(num == 2)
                {
                    if(myData.US[i] == '\0')
                        {
                            myStockUS.name[num][index++] = '\0';
                            break;
                        }
                    myStockUS.name[num][index++] = myData.US[i];
                }
        }
    printf("[US1] %s\r\n", myStockUS.name[0]);
    printf("[US2] %s\r\n", myStockUS.name[1]);
    printf("[US3] %s\r\n", myStockUS.name[2]);
    
    Serial.println("-------------------------------------");
}


bool getBusStationId() 
{
    Serial.println("-------------------------------------");
    Serial.println("[REQUEST] Bus Station Info");

    WiFiClient mySocket;
    HTTPClient myHTTP;

    int httpCode;
    char buffer[300];
    myBus.mobileNo = mobileNo;
    
    char *busStop1 = "상인우방아파트";
    char *busStop2 = "경북대학교북문앞";
    char *programCode = "./test1";
    
    char temp[1024];
    
    snprintf(buffer, sizeof(buffer), "http://apis.data.go.kr/6410000/busstationservice/getBusStationList?serviceKey=%s&keyword=%d",PUBLIC_DATA_API_KEY, myBus.mobileNo);
    myHTTP.begin(mySocket, buffer);
    delay(500);

    httpCode = myHTTP.GET();
    printf("[HTTP CODE] %d \r\n", httpCode);

    if (httpCode == HTTP_CODE_OK) 
    {
        Serial.println("[OK]");
        strcpy(xmlDoc, myHTTP.getString().c_str());
    } 
    else 
    {
        Serial.println("[ERROR]");
        myHTTP.end();
        Serial.println("-------------------------------------");
        return false;
    }
    myHTTP.end();

    XMLDocument xmlDocument;
    if (xmlDocument.Parse(xmlDoc) != XML_SUCCESS) 
    {
        Serial.println("[PARSE ERROR]");
        myHTTP.end();
        Serial.println("-------------------------------------");
        return false;
    };

    XMLNode* root = xmlDocument.RootElement();

    // 정류소아이디
    XMLElement* element = root->FirstChildElement("msgBody")->FirstChildElement("busStationList")->FirstChildElement("stationId");
    element->QueryIntText(&myBus.stationId);
    printf("[정류소아이디] %d\r\n", myBus.stationId);

    // 정류소명
    element = root->FirstChildElement("msgBody")->FirstChildElement("busStationList")->FirstChildElement("stationName");
    strcpy(myBus.stationName, element->GetText());
    printf("[정류소명] %s\r\n", myBus.stationName);

    Serial.println("-------------------------------------");
    return true;
}

bool getStaOrder(int stationId, const char* routeName) 
{
    Serial.println("-------------------------------------");
    Serial.println("[REQUEST] Bus StaOrder");

    WiFiClient mySocket;
    HTTPClient myHTTP;

    int httpCode;
    char buffer[300];

    snprintf(buffer, sizeof(buffer), "http://apis.data.go.kr/6410000/busstationservice/getBusStationViaRouteList?serviceKey=%s&stationId=%d", PUBLIC_DATA_API_KEY, stationId);
    myHTTP.begin(mySocket, buffer);
    delay(500);

    if (myHTTP.GET() == HTTP_CODE_OK) {
        Serial.println("[OK]");
        strcpy(xmlDoc, myHTTP.getString().c_str());
    } 
    else 
    {
        Serial.println("[ERROR]");
        myHTTP.end();
        Serial.println("-------------------------------------");
        return false;
    }
    myHTTP.end();

    XMLDocument xmlDocument;
    if (xmlDocument.Parse(xmlDoc) != XML_SUCCESS) 
    {
        Serial.println("[PARSE ERROR]");
        myHTTP.end();
        Serial.println("-------------------------------------");
        return false;
  };

    XMLNode* root = xmlDocument.RootElement();
    XMLElement* element = root->FirstChildElement("msgBody")->FirstChildElement("busRouteList");

    char routeNameBuf[30];
    for (XMLElement* routeList = element; routeList != NULL; routeList = routeList->NextSiblingElement()) 
    {
        strcpy(routeNameBuf, routeList->FirstChildElement("routeName")->GetText());
        printf("%s\r\n", routeNameBuf);

        if (strcmp(routeNameBuf, routeName) == 0) 
        {
            routeList->FirstChildElement("routeId")->QueryIntText(&myBus.routeId);
            routeList->FirstChildElement("staOrder")->QueryIntText(&myBus.staOrder);
            break;
        }
    }

    printf("[노선아이디] %d\r\n", myBus.routeId);
    printf("[정류소순번] %d\r\n", myBus.staOrder);

    Serial.println("-------------------------------------");
    return true;
}

bool getBusArrival(const char* routeName, int stationId, int routeId, int staOrder)  // getBusArrivalItem Operation
{
    Serial.println("-------------------------------------");
    Serial.println("[REQUEST] BUS Arrival");

    // 화면 전환
    img.pushImage(0, 0, 240, 240, DUCK_BUS_240);
    img.pushSprite(0, 0);

    WiFiClient mySocket;
    HTTPClient myHTTP;

    int httpCode;
    char buffer[300];
    memset(xmlDoc, 0, sizeof(xmlDoc));

    snprintf(buffer, sizeof(buffer), "http://apis.data.go.kr/6410000/busarrivalservice/getBusArrivalItem?serviceKey=%s&stationId=%d&routeId=%d&staOrder=%d", PUBLIC_DATA_API_KEY, stationId, routeId, staOrder);
    myHTTP.begin(mySocket, buffer);
    delay(500);

    httpCode = myHTTP.GET();
    printf("[HTTP CODE] %d \r\n", httpCode);

    if (httpCode == HTTP_CODE_OK) 
    {
        Serial.println("[OK]");
        strcpy(xmlDoc, myHTTP.getString().c_str());
    } 
    else 
    {
        Serial.println("[ERROR]");
        myHTTP.end();
        Serial.println("-------------------------------------");
        return false;
    }
    myHTTP.end();

    XMLDocument xmlDocument;
    if (xmlDocument.Parse(xmlDoc) != XML_SUCCESS) 
    {
        Serial.println("[PARSE ERROR]");
        Serial.println("-------------------------------------");
        return false;
    };

    XMLNode* root = xmlDocument.RootElement();

    // 첫번째차량 위치정보
    XMLElement* element = root->FirstChildElement("msgBody")->FirstChildElement("busArrivalItem")->FirstChildElement("locationNo1");
    element->QueryIntText(&myBus.locationNo1);
    printf("[첫번째버스 위치정보] %d번째전 정류소\r\n", myBus.locationNo1);

    // 첫번째차량 도착예상시간
    element = root->FirstChildElement("msgBody")->FirstChildElement("busArrivalItem")->FirstChildElement("predictTime1");
    element->QueryIntText(&myBus.predictTime1);
    printf("[첫번째버스 도착예상시간] %d분후\r\n", myBus.predictTime1);

    // 정류소명
    String staStr(myBus.stationName);
    int nameLen = strlen(myBus.stationName) / 3;
    AimHangul_v2(120 - (float)(nameLen/2) * 16, 50, staStr, TFT_WHITE);  // 중앙정렬

    // 버스와 도착 시간
    char preBuf[20];
    snprintf(preBuf, sizeof(preBuf), "%s  %d분", myBus.routeName, myBus.predictTime1);
    String preStr(preBuf);
    AimHangul_v2(35, 100, preStr, TFT_WHITE);  // 중앙정렬

    Serial.println("-------------------------------------");
    return true;
}
